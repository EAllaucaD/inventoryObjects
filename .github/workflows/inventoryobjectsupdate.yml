name: CI Pipeline Inventory Objects Update

on:
  workflow_call:
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      EC2_HOST:
        required: true
      EC2_KEY:
        required: true
      HOST_DB:
        required: true
      USER_DB:
        required: true
      PASSWORD_DB:
        required: true
      DATABASE_NAME:
        required: true
      JWT_SECRET:
        required: true
      PORTU:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
          
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Exclude docs and swagger.yaml for main
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            rm -rf ./inventoryObjectsUpdate/src/docs
          fi
          if [[ "${{ github.event_name }}" == "pull_request" && ( "${{ github.event.pull_request.base.ref }}" == "main" ) ]]; then
            rm -rf ./inventoryObjectsUpdate/src/docs
          fi

      - name: Build the Docker image
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker build -t ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:dev ./inventoryObjectsUpdate
          elif [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
            docker build -t ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:prod ./inventoryObjectsUpdate
          elif [[ "${{ github.event.pull_request.base.ref }}" == "QA" ]]; then
            docker build -t ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:qa ./inventoryObjectsUpdate
          else
            echo "Invalid branch for building Docker image."
            exit 1
          fi
          
      - name: Push to DockerHub
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            docker push ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:dev
          elif [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
            docker push ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:prod
          elif [[ "${{ github.event.pull_request.base.ref }}" == "QA" ]]; then
            docker push ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:qa
          fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              sudo systemctl restart docker
            else
              echo "Docker is already installed."
            fi

            if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              TAG="dev"
            elif [[ "${{ github.event.pull_request.base.ref }}" == "QA" ]]; then
              TAG="qa"
            elif [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
              TAG="prod"
            else
              echo "Invalid branch for deployment."
              exit 1
            fi

            echo "Pulling Docker image with tag: $TAG"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:$TAG

            echo "Stopping and removing old container..."
            sudo docker stop inventoryobjectsupdate-container || true
            sudo docker rm -f inventoryobjectsupdate-container || true

            echo "Running new container..."
            sudo docker run -d -p 3017:3017 --restart unless-stopped --name inventoryobjectsupdate-container \
              -e HOST_DB=${{ secrets.HOST_DB }} \
              -e USER_DB=${{ secrets.USER_DB }} \
              -e PASSWORD_DB=${{ secrets.PASSWORD_DB }} \
              -e DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e PORTU=${{ secrets.PORTU }} \
              ${{ secrets.DOCKER_USERNAME }}/inventoryobjectsupdate:$TAG
